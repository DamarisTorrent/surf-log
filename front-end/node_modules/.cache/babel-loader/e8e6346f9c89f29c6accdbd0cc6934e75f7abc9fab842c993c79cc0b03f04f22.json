{"ast":null,"code":"var _jsxFileName = \"/Users/damaristorrent/buoyproject/surf-log/front-end/src/pages/app/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let dataSplit = [];\n  const [message, setMessage] = useState(\"\");\n  const [month, setMonth] = useState(\"\");\n  const [day, setDay] = useState(\"\");\n  const [year, setYear] = useState(\"\");\n  const [hour, setHour] = useState(\"\");\n  const [minute, setMinute] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://localhost:8000/message\").then(res => res.json()).then(data => setMessage(data.message));\n  }, []);\n  const fileUrl = \"data/realtime2/41004.txt\";\n  fetch(fileUrl)\n  // fetch(fileUrl)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return response.text();\n  }).then(fileContent => {\n    // Process the file content here\n\n    const dataString = fileContent.split(\"\\n\");\n    console.log(dataString[0]);\n    console.log(dataString[1]);\n    dataSplit = dataString[2].split(\" \");\n    setMonth(dataSplit[1]);\n    setYear(dataSplit[0]);\n    setDay(dataSplit[2]);\n    setHour(dataSplit[3]);\n    setMinute(dataSplit[4]);\n\n    // You can save the file content to a variable or use it as needed\n    // For example, you can pass it to another function for further processing\n    // yourFunctionToProcessFileContent(fileContent);\n  }).catch(error => {\n    console.error(\"Error reading the file:\", error);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Hello from SurfLog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"This is a message from the back end Express server: \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The last buoy reading was at GMT time: \", month, \"-\", day, \"-\", year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TS9EY07pRfRKA8UW6BG8kT8iEqc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","dataSplit","message","setMessage","month","setMonth","day","setDay","year","setYear","hour","setHour","minute","setMinute","fetch","then","res","json","data","fileUrl","response","ok","Error","text","fileContent","dataString","split","console","log","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/damaristorrent/buoyproject/surf-log/front-end/src/pages/app/App.js"],"sourcesContent":["import \"./App.css\"\nimport React, { useState, useEffect } from \"react\"\n\nfunction App() {\n \n  let dataSplit = []\n  const [message, setMessage] = useState(\"\")\n  const [month, setMonth] = useState(\"\")\n  const [day, setDay] = useState(\"\")\n  const [year, setYear] = useState(\"\")\n  const [hour, setHour] = useState(\"\")\n  const [minute, setMinute] = useState(\"\")\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/message\")\n      .then((res) => res.json())\n      .then((data) => setMessage(data.message))\n  }, [])\n\n  const fileUrl =\n    \"data/realtime2/41004.txt\"\n  \n  fetch(fileUrl)\n    // fetch(fileUrl)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\")\n      }\n      return response.text()\n    })\n    .then((fileContent) => {\n      // Process the file content here\n\n      const dataString = fileContent.split(\"\\n\")\n      console.log(dataString[0])\n      console.log(dataString[1])\n      dataSplit = dataString[2].split(\" \")\n      setMonth(dataSplit[1])\n      setYear(dataSplit[0])\n      setDay(dataSplit[2])\n      setHour(dataSplit[3])\n      setMinute(dataSplit[4])\n\n      // You can save the file content to a variable or use it as needed\n      // For example, you can pass it to another function for further processing\n      // yourFunctionToProcessFileContent(fileContent);\n    })\n    .catch((error) => {\n      console.error(\"Error reading the file:\", error)\n    })\n\n   \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <p>Hello from SurfLog</p>\n        <p>This is a message from the back end Express server: {message}</p>\n        <p>The last buoy reading was at GMT time: {month}-{day}-{year}</p>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}